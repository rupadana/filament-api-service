<?php

namespace {{ handlersVirtualNamespace }};

use {{ resource }};
use {{ realResource }} as {{ handlerName }}Real;

use OpenApi\Attributes as OAT;
use Rupadana\ApiService\ApiService;


$panel = filament()->getCurrentPanel();

$panelId = $panel->getId();
$panelPath = $panel->getPath();
$hasTenancy = $panel->hasTenancy();
$tenantSlugAttribute = $panel->getTenantSlugAttribute();
$panelPrefix = app(ApiService::class)->isRoutePrefixedByPanel() ? $panelPath ?? $panelId : '';

defined("API_DEFAULT_TRANSFORMER_NAME") ?: define("API_DEFAULT_TRANSFORMER_NAME", config('api-service.route.default_transformer_name'));
defined("API_VERSION_PARAMETER_NAME") ?: define("API_VERSION_PARAMETER_NAME", config('api-service.route.api_version_parameter_name'));
defined("API_TRANSFORMER_HEADER") ?: define("API_TRANSFORMER_HEADER", config('api-service.route.api_transformer_header'));

function apiVersionPath() {
    defined("API_VERSION_URL_PATH") ?: define("API_VERSION_URL_PATH", '{version}/');
    defined("API_VERSION_URL_QUERY") ?: define("API_VERSION_URL_QUERY", false);
    defined("API_VERSION_URL_HEADERS") ?: define("API_VERSION_URL_HEADERS", false);
}

function apiVersionQuery() {
    defined("API_VERSION_URL_PATH") ?: define("API_VERSION_URL_PATH", '');
    defined("API_VERSION_URL_QUERY") ?: define("API_VERSION_URL_QUERY", true);
    defined("API_VERSION_URL_HEADERS") ?: define("API_VERSION_URL_HEADERS", false);
}

function apiVersionHeaders() {
    defined("API_VERSION_URL_PATH") ?: define("API_VERSION_URL_PATH", '');
    defined("API_VERSION_URL_QUERY") ?: define("API_VERSION_URL_QUERY", false);
    defined("API_VERSION_URL_HEADERS") ?: define("API_VERSION_URL_HEADERS", true);
}

function apiVersionDefault() {
    defined("API_VERSION_URL_PATH") ?: define("API_VERSION_URL_PATH", '');
    defined("API_VERSION_URL_QUERY") ?: define("API_VERSION_URL_QUERY", false);
    defined("API_VERSION_URL_HEADERS") ?: define("API_VERSION_URL_HEADERS", false);
}

match (config('api-service.route.api_version_method')) {
    'path' => apiVersionPath(),
    'query' => apiVersionQuery(),
    'headers' => apiVersionHeaders(),
    default => apiVersionDefault(),
};

if (
    ApiService::isTenancyEnabled() &&
    ApiService::tenancyAwareness() &&
    app({{ resourceClass }}::class)->isScopedToTenant()
) {
    defined("TENANT_AWARENESS_{{ capitalsResource }}") ?: define("TENANT_AWARENESS_{{ capitalsResource }}", true);
} else {
    defined("TENANT_AWARENESS_{{ capitalsResource }}") ?: define("TENANT_AWARENESS_{{ capitalsResource }}", false);
}

if ({{ handlerName }}Real::isPublic()) {
    defined("RESOURCE_PUBLIC_{{ capitalsResource }}_PAGINATION") ?: define("RESOURCE_PUBLIC_{{ capitalsResource }}_PAGINATION", true);
} else {
    defined("RESOURCE_PUBLIC_{{ capitalsResource }}_PAGINATION") ?: define("RESOURCE_PUBLIC_{{ capitalsResource }}_PAGINATION", false);
}

$resourceTransformers = [];
$transformers = {{ handlerName }}Real::getApiTransformers();
if (!empty($transformers)) {
    foreach ($transformers as $tr_key => $transformer) {
        $resourceTransformers[] = $tr_key;
    }
    $custom_transformers = count(array_except($transformers, ['default']));
}

defined("RESOURCE_{{ capitalsResource }}_PAGINATION_CUSTOM_TRANSFORMERS") ?: define("RESOURCE_{{ capitalsResource }}_PAGINATION_CUSTOM_TRANSFORMERS", $custom_transformers ?? 0);

defined("RESOURCE_{{ capitalsResource }}_PAGINATION_TRANSFORMERS") ?: define("RESOURCE_{{ capitalsResource }}_PAGINATION_TRANSFORMERS", $resourceTransformers);
defined("RESOURCE_{{ capitalsResource }}_PAGINATION_TRANSFORMER_HEADER_KEY") ?: define("RESOURCE_{{ capitalsResource }}_PAGINATION_TRANSFORMER_HEADER_KEY", config('api-service.route.api_transformer_header'));

defined("PANEL_PREFIX_{{ capitalsResource }}_PAGINATION") ?: define("PANEL_PREFIX_{{ capitalsResource }}_PAGINATION", $panelPrefix);
defined("BASE_URL") ?: define("BASE_URL", config('app.url'));

#[OAT\Get(
    // path: "/" . ((TENANT_AWARENESS_{{ capitalsResource }}) ? "{tenant}/" : "") . "{{ pluralClass }}",
    path: "{{ path }}",
    operationId: "get{{ pluralClass }}",
    tags: ["{{ pluralClass }}"],
    servers: [
        (TENANT_AWARENESS_{{ capitalsResource }}) ?
            new OAT\Server(
                description: "API Server Filament Panel",
                url: BASE_URL . "/api/" . API_VERSION_URL_PATH . "{panel}" . PANEL_PREFIX_{{ capitalsResource }}_PAGINATION . "/{tenant}",
                variables: [
                    new OAT\ServerVariable(
                        serverVariable: "panel",
                        description: "Select the Filament Panel",
                        enum: PANEL_ENUMS,
                        default: PANEL_ENUMS[0]
                    ),
                    new OAT\ServerVariable(
                        serverVariable: "tenant",
                        description: 'ID of the tenant',
                        default: ""
                    ),
                (API_VERSION_URL_PATH != '') ?
                    new OAT\ServerVariable(
                        serverVariable: "version",
                        description: 'Version or Transformer name of this API endpoint',
                        default: API_DEFAULT_TRANSFORMER_NAME,
                    )
                : null,
            ]
            ) :
            new OAT\Server(
                description: "API Server Filament Panel",
                url: BASE_URL . "/api/" . API_VERSION_URL_PATH . API_VERSION_URL_PATH . PANEL_PREFIX_{{ capitalsResource }}_PAGINATION . "/",
                variables: [
                (API_VERSION_URL_PATH != '') ?
                    new OAT\ServerVariable(
                        serverVariable: "version",
                        description: 'Version or Transformer name of this API endpoint',
                        default: API_DEFAULT_TRANSFORMER_NAME,
                    )
                : null,
                ]
            )
    ],
    summary: "Get list of {{ pluralClass }}",
    description: "Returns list of {{ pluralClass }}",
    security: (!RESOURCE_PUBLIC_{{ capitalsResource }}_PAGINATION) ?  [["bearerAuth" => []]] : null,
    parameters: [

        // (TENANT_AWARENESS_{{ capitalsResource }}) ? new OAT\Parameter(ref: "#/components/parameters/tenant") : null,
        // (TENANT_AWARENESS_{{ capitalsResource }}) ? new OAT\Parameter(name: "tenant", description: 'ID of the tenant', schema: new OAT\Schema(type: 'integer|string'), required: true, in: "path") : null,

        (API_VERSION_URL_QUERY) ? new OAT\Parameter(
            name: API_VERSION_PARAMETER_NAME,
            in: "query",
            required: true,
            description: "Set the correct API Version / Transformer you want to use.",
            schema: new OAT\Schema(type: "string")
        ) : null,

        (API_VERSION_URL_HEADERS) ? new OAT\HeaderParameter(
            name: API_TRANSFORMER_HEADER,
            in: "header",
            required: true,
            allowEmptyValue: true,
            description: "Set the correct API Version / Transformer you want to use.",
            schema: new OAT\Schema(type: "string")
        ) : null,

        new OAT\Parameter(
            name: "page[offset]",
            description: "Pagination offset option",
            required: false,
            in: "query",
            schema: new OAT\Schema(type: "integer"),
            example: "", // OAT\Examples(example="int", value="0", summary="An int value."),
        ),
        new OAT\Parameter(
            name: "page[limit]",
            description: "Pagination limit option",
            required: false,
            in: "query",
            schema: new OAT\Schema(type: "integer"),
            example: "", // OAT\Examples(example="int", value="0", summary="An int value."),
        ),
        new OAT\Parameter(
            name: "sort",
            description: "Sorting",
            required: false,
            in: "query",
            schema: new OAT\Schema(type: "string"),
            example: "", // @OAT\Examples(example="string", value="-created,name", summary="A comma separated value"),
        ),
        new OAT\Parameter(
            name: "include",
            description: "Include Relationships",
            required: false,
            in: "query",
            schema: new OAT\Schema(type: "string"),
            example: "", // @OAT\Examples(example="string", value="order,user", summary="A comma separated value of relationships"),
        ),
    ],
    responses: [
        new OAT\Response(response: 200, description: 'Operation succesful', content:
            (RESOURCE_{{ capitalsResource }}_PAGINATION_CUSTOM_TRANSFORMERS > 0) ?
                 new OAT\JsonContent(oneOf: [
                    new OAT\Schema(ref: "#/components/schemas/{{ modelClass }}Transformer/properties/data/items"),
                    new OAT\Schema(ref: "#/components/schemas/DefaultTransformer/properties/data/items"),
                ]) :
                new OAT\JsonContent(ref: "#/components/schemas/DefaultTransformer/properties/data/items")
        ),
        new OAT\Response(response: 400, description: 'Bad Request'),
        new OAT\Response(response: 401, description: 'Unauthenticated'),
        new OAT\Response(response: 403, description: 'Forbidden'),
        new OAT\Response(response: 404, description: 'Resource not Found'),
    ]
)]


class {{ handlerName }} extends {{ handlerName }}Real {}

